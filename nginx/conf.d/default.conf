server {
    listen 8000;
    server_name localhost;

    # Augmenter les timeouts pour les requêtes impliquant des LLMs
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;

    # Configuration des logs
    access_log /var/log/nginx/api_access.log main;
    error_log /var/log/nginx/api_error.log warn;

    # En-têtes communs pour toutes les requêtes
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Route pour le service d'orchestration des LLMs
    location /api/llm/ {
        # Vérifications de sécurité et validation des requêtes
        if ($request_method !~ ^(GET|POST|OPTIONS)$) {
            return 405;
        }

        # Limiteur de débit pour prévenir les abus
        limit_req zone=llm_limit burst=20 nodelay;

        proxy_pass http://llm-orchestrator:8080/;

        # En-têtes de sécurité spécifiques
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }

    # Route pour le service de gestion des patients
    location /api/patients/ {
        # Vérifications de sécurité
        if ($request_method !~ ^(GET|POST|PUT|DELETE|OPTIONS)$) {
            return 405;
        }

        proxy_pass http://patient-service:8081/;

        # En-têtes de sécurité spécifiques pour les données sensibles
        add_header Cache-Control "no-store, no-cache, must-revalidate";
        add_header Pragma "no-cache";
    }

    # Route pour le service d'analyse des médicaments
    location /api/medications/ {
        # Vérifications de sécurité
        if ($request_method !~ ^(GET|POST|OPTIONS)$) {
            return 405;
        }

        proxy_pass http://medication-analysis:8082/;

        # En-têtes de sécurité
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }

    # Route pour le service de facturation
    location /api/billing/ {
        # Vérifications de sécurité
        if ($request_method !~ ^(GET|POST|PUT|OPTIONS)$) {
            return 405;
        }

        proxy_pass http://billing-service:8083/;

        # En-têtes de sécurité pour les données financières
        add_header Cache-Control "no-store, no-cache, must-revalidate";
        add_header Pragma "no-cache";
    }

    # Route pour le frontend
    location / {
        proxy_pass http://frontend:3000;

        # Configuration pour WebSocket (pour les communications temps réel)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Cache pour les assets statiques
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend:3000;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
            access_log off;
        }
    }

    # Endpoint de santé pour vérifier que l'API gateway fonctionne
    location /health {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
    }

    # Limite de taille pour les uploads
    client_max_body_size 10M;

    # Configuration des limiteurs de débit pour empêcher les attaques DoS
    limit_req_zone $binary_remote_addr zone=llm_limit:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=30r/s;

    # Gestion des erreurs
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }

    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}
